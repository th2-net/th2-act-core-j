plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.32"
    id 'java-library'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
}

ext {
    sharedDir = file("${project.rootDir}/shared")
}

group = "com.exactpro.th2"
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

dependencies {
    api platform("com.exactpro.th2:bom:4.1.0")

    api "com.exactpro.th2:common:3.44.0"
    api "com.exactpro.th2:grpc-check1:3.7.0"

    implementation 'io.github.microutils:kotlin-logging:2.1.21'

    implementation "org.slf4j:slf4j-api"

    testImplementation "org.junit.jupiter:junit-jupiter:5.4.2"
    // to tests only
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'

    testImplementation "org.junit.jupiter:junit-jupiter:5.7.1"
    testImplementation 'io.strikt:strikt-core:0.34.1'
    testImplementation 'io.mockk:mockk:1.12.4'
}

jar {
    manifest {
        attributes(
                "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.vendor")})",
                "Specification-Title": "Act Core",
                "Specification-Vendor": "Exactpro Systems LLC",
                "Implementation-Title": project.archivesBaseName,
                "Implementation-Vendor": "Exactpro Systems LLC",
                "Implementation-Vendor-Id": "com.exactpro",
                "Implementation-Version": project.version
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
            project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}