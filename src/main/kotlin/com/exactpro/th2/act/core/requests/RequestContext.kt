/*
 * Copyright 2022-2022 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.exactpro.th2.act.core.requests

import com.exactpro.th2.act.core.managers.ISubscriptionManager
import com.exactpro.th2.act.core.routers.EventRouter
import com.exactpro.th2.act.core.routers.MessageRouter
import com.exactpro.th2.common.grpc.Checkpoint
import com.exactpro.th2.common.grpc.EventID
import io.grpc.Context
import io.grpc.Deadline

/**
 * Creates a data object for a request.
 *
 * @param rpcName The name of the remote protocol call.
 * @param requestName The name of the class of the request.
 * @param messageBatchRouter The [MessageRouter] to be used for sending messages.
 * @param eventBatchRouter The [EventRouter] to be used for storing events.
 * @param parentEventID The [EventID] of the parent event for the request.
 * @param checkpoint the [Checkpoint] generated by the verification service for the request.
 * @param subscriptionManager The subscription manager for registering message listeners as a [ISubscriptionManager].
 * @param rpcContext The [Context] for the current rpc call (if omitted the current context will be used).
 */
data class RequestContext(
    val rpcName: String,
    val requestName: String,
    val messageBatchRouter: MessageRouter,
    val eventBatchRouter: EventRouter,
    val parentEventID: EventID,
    val checkpoint: Checkpoint,
    val subscriptionManager: ISubscriptionManager,
    val timeout: Long,
    private val rpcContext: Context = Context.current()
) {
    private val startTime = System.currentTimeMillis()

    /**
     * Returns the remaining time.
     */
    val remainingTime: Long
        get() = timeout - (System.currentTimeMillis() - startTime)

    /**
     * Returns 'true' if the deadline is over, otherwise 'false'.
     */
    val isOverDeadline: Boolean
        get() = System.currentTimeMillis() - startTime >= timeout
}
